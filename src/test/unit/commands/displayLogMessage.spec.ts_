import { Range, Selection, TextDocument, TextEditor, window } from 'vscode';
import { describe, expect, it, vi } from 'vitest';
import { displayLogMessageCommand } from '@/commands/displayLogMessage';
import { GeneralDebugMessage } from '@/debug-message';
import { ExtensionProperties } from '@/typings';
import { instanceDebugMessage } from '@/utils/instanceDebugMessage';

vi.mock('vscode');

describe.todo('displayLogMessageCommand', () => {
  let mockEditor: TextEditor;
  let mockDocument: TextDocument;
  let mockSelection: Selection;
  let mockRange: Range;
  let mockDebugMessage: GeneralDebugMessage;
  let mockExtensionProperties: ExtensionProperties;
  let getTabSizeStub: () => number;

  beforeEach(() => {
    mockDocument = {
      getText: vi.fn(),
      getWordRangeAtPosition: vi.fn(),
    };

    mockSelection = {
      active: {
        line: 1,
      },
    };

    mockRange = {
      start: {
        line: 1,
      },
      end: {
        line: 2,
      },
    };

    mockEditor = {
      selections: [mockSelection],
      document: mockDocument,
      edit: vi.fn(),
    };

    mockExtensionProperties = {
      wrapLogMessage: false,
      logMessagePrefix: '🚀',
      logMessageSuffix: ':',
      addSemicolonInTheEnd: true,
      insertEmptyLineBeforeLogMessage: false,
      insertEmptyLineAfterLogMessage: false,
      quote: '"',
      delimiterInsideMessage: '~',
      includeFileNameAndLineNum: true,
      logFunction: {},
    };

    mockDebugMessage = {
      insertMessage: vi.fn(),
    };

    vi.fn(window, 'activeTextEditor').get(() => mockEditor);

    getTabSizeStub = vi.fn().returns(2);
    vi.fn(getTabSize, 'getTabSize').returns(getTabSizeStub);

    vi.fn(instanceDebugMessage, 'instanceDebugMessage').returns(mockDebugMessage);
  });

  afterEach(() => {});

  it('应该直接返回当没有活动编辑器时', async () => {
    vi.fn(window, 'activeTextEditor').get(() => undefined);

    const command = displayLogMessageCommand();
    await command.handler(mockExtensionProperties);

    expect(mockDocument.getWordRangeAtPosition.called).to.be.false;
    expect(mockEditor.edit.called).to.be.false;
  });

  it('应该返回调用当选中字符串时', async () => {
    mockDocument.getWordRangeAtPosition.returns(mockRange);
    mockDocument.getText.withArgs(mockRange).returns('foo');

    const command = displayLogMessageCommand();
    await command.handler(mockExtensionProperties);

    expect(mockDebugMessage.insertMessage.calledOnce).to.be.true;
    expect(mockDebugMessage.insertMessage.getCall(0).args).to.deep.equal([
      mockEditor.edit,
      mockDocument,
      'foo',
      1,
      2,
      mockExtensionProperties,
    ]);
  });

  it('应该直接返回当没有选中字符时或光标没有在字符串旁边时', async () => {
    mockDocument.getText.returns('');

    const command = displayLogMessageCommand();
    await command.handler(mockExtensionProperties);

    expect(mockDebugMessage.insertMessage.called).to.be.false;
  });
});
